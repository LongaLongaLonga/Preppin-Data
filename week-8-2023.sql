WITH YEAR_DATA AS (

SELECT *, 
'01/01/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_01
UNION ALL

SELECT *, 
'01/02/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_02
UNION ALL

SELECT *, 
'01/03/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_03
UNION ALL
-- Challenge can be found: https://preppindata.blogspot.com/2023/02/2023-week-8-taking-stock.html
  
SELECT *, 
'01/04/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_04
UNION ALL

SELECT *, 
'01/05/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_05
UNION ALL

SELECT *, 
'01/06/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_06
UNION ALL

SELECT *, 
'01/07/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_07
UNION ALL

SELECT *, 
'01/08/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_08
UNION ALL

SELECT *, 
'01/09/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_09
UNION ALL

SELECT *, 
'01/10/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_10
UNION ALL

SELECT *, 
'01/11/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_11
UNION ALL

SELECT *, 
'01/12/2023' AS FILE_DATE
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK08_12
)

, CAT AS (
SELECT *,
TO_DOUBLE(REPLACE(PURCHASE_PRICE, '$', '')) AS P_C,
CASE 
WHEN P_C < 25000 THEN 'LOW'
WHEN P_C < 50000 THEN 'MEDIUM'
WHEN P_C < 75000 THEN 'HIGH'
ELSE 'VERY HIGH'
END AS PURCHASE_PRICE_CATEGORY,
REPLACE(MARKET_CAP, '$', '') AS M_C,
CASE
WHEN CONTAINS(M_C, 'M') THEN TO_DOUBLE(REPLACE(M_C, 'M', '')) * 1000000
WHEN CONTAINS(M_C, 'B') THEN TO_DOUBLE(REPLACE(M_C, 'B', '')) * 1000000000
END AS M_CAP,
CASE
WHEN M_CAP < 100000000 THEN 'SMALL'
WHEN M_CAP < 1000000000 THEN 'MEDIUM'
WHEN M_CAP < 100000000000 THEN 'LARGE'
ELSE 'HUGE'
END AS MARKET_CAP_CATEGORY
FROM YEAR_DATA
WHERE MARKET_CAP != 'n/a'
) 

, FINAL AS (
SELECT 
*,
RANK() OVER(PARTITION BY FILE_DATE, MARKET_CAP_CATEGORY, PURCHASE_PRICE_CATEGORY ORDER BY P_C DESC) AS RNK
FROM CAT
) 

SELECT
MARKET_CAP_CATEGORY,
PURCHASE_PRICE_CATEGORY,
FILE_DATE,
TICKER, 
SECTOR, 
MARKET, 
STOCK_NAME, 
MARKET_CAP AS MARKET_CAPITALISATION,
PURCHASE_PRICE,
RNK AS RANK
FROM FINAL 
WHERE RNK <= 5





